// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cars": {
            "get": {
                "description": "Recive cars list with provided filters and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Recive cars",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "perPage",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "current page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "car plate number",
                        "name": "regNum",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "mark of car",
                        "name": "mark",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "model of car",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "produced year of car",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "id of person who own the car",
                        "name": "ownerId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Car"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create car by regNums param, that provided in body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Create car",
                "parameters": [
                    {
                        "description": "body that contains array of plate numbers of car",
                        "name": "regNums",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreateCarBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Car"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/cars/{id}": {
            "put": {
                "description": "Update car by id from param",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Update car",
                "parameters": [
                    {
                        "type": "string",
                        "description": "car id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "fields for updating car",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateCarBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Car"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete car by id from param",
                "tags": [
                    "Cars"
                ],
                "summary": "Delete car",
                "parameters": [
                    {
                        "type": "string",
                        "description": "car id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.CreateCarBody": {
            "type": "object",
            "properties": {
                "regNums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controller.UpdateCarBody": {
            "type": "object",
            "properties": {
                "mark": {
                    "type": "string",
                    "example": "Toyota"
                },
                "model": {
                    "type": "string",
                    "example": "Supra"
                },
                "ownerId": {
                    "type": "string",
                    "example": "225a7660-8dff-4d22-93f2-a50606b8ebe6"
                },
                "regnum": {
                    "type": "string",
                    "example": "VO555X"
                },
                "year": {
                    "type": "integer",
                    "example": 1998
                }
            }
        },
        "model.Car": {
            "type": "object",
            "properties": {
                "carModel": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mark": {
                    "type": "string"
                },
                "personID": {
                    "type": "string"
                },
                "regNum": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "/v1",
	Schemes:          []string{"http"},
	Title:            "E_M swagger API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
