basePath: /v1
definitions:
  controller.CreateCarBody:
    properties:
      regNums:
        items:
          type: string
        type: array
    type: object
  controller.UpdateCarBody:
    properties:
      mark:
        example: Toyota
        type: string
      model:
        example: Supra
        type: string
      ownerId:
        example: 225a7660-8dff-4d22-93f2-a50606b8ebe6
        type: string
      regnum:
        example: VO555X
        type: string
      year:
        example: 1998
        type: integer
    type: object
  model.Car:
    properties:
      carModel:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      mark:
        type: string
      personID:
        type: string
      regNum:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:4000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E_M swagger API
  version: "1.0"
paths:
  /cars:
    get:
      description: Recive cars list with provided filters and pagination
      parameters:
      - description: page size
        in: query
        name: perPage
        type: integer
      - description: current page
        in: query
        name: page
        type: integer
      - description: car plate number
        in: query
        name: regNum
        type: string
      - description: mark of car
        in: query
        name: mark
        type: string
      - description: model of car
        in: query
        name: model
        type: string
      - description: produced year of car
        in: query
        name: year
        type: integer
      - description: id of person who own the car
        in: query
        name: ownerId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Car'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Recive cars
      tags:
      - Cars
    post:
      consumes:
      - application/json
      description: Create car by regNums param, that provided in body
      parameters:
      - description: body that contains array of plate numbers of car
        in: body
        name: regNums
        required: true
        schema:
          $ref: '#/definitions/controller.CreateCarBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Car'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create car
      tags:
      - Cars
  /cars/{id}:
    delete:
      description: Delete car by id from param
      parameters:
      - description: car id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete car
      tags:
      - Cars
    put:
      consumes:
      - application/json
      description: Update car by id from param
      parameters:
      - description: car id
        in: path
        name: id
        required: true
        type: string
      - description: fields for updating car
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateCarBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Car'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update car
      tags:
      - Cars
schemes:
- http
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
